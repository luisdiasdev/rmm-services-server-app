plugins {
	id 'org.springframework.boot' version '2.6.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'com.luisdias'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

ext {
	set('testcontainersVersion', "1.16.2")
	set('springdocVersion', "1.6.4")
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation "org.springdoc:springdoc-openapi-ui:${springdocVersion}"
	implementation "org.springdoc:springdoc-openapi-security:${springdocVersion}"
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2', 'io.jsonwebtoken:jjwt-jackson:0.11.2'
	implementation 'org.flywaydb:flyway-core'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
}

sourceSets {
	integration {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integration/java')
		}
		resources {
			srcDir file('src/integration/resources')
		}
	}
}

configurations {
	integrationImplementation.extendsFrom testImplementation
	integrationRuntimeOnly.extendsFrom testRuntimeOnly
}

task integrationTest(type: Test) {
	useJUnitPlatform()
	testClassesDirs = sourceSets.integration.output.classesDirs
	classpath = sourceSets.integration.runtimeClasspath
}
check.dependsOn integrationTest

tasks.named('processIntegrationResources') {
	duplicatesStrategy = 'exclude'
}

tasks.named('test') {
	useJUnitPlatform()
}

jar {
	enabled = false
}
